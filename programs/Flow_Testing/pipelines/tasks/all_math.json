{
  "login_id": "Pavan",
  "id": 776,
  "project_name": "Flow_Testing",
  "pipeline_name": "expression_math",
  "project_id": 82,
  "pipeline_id": 224,
  "task_name": "all_math",
  "task_description": "testing for all math functions",
  "task_type": "Transformation",
  "task_sequence": "0",
  "last_run_id": null,
  "status": "New",
  "updated_dttm": "2024-06-27T05:52:11.000Z",
  "source": "none",
  "target": "none",
  "is_active": "Y",
  "created_by": "Pavan",
  "updated_by": "Pavan",
  "job_execution": "pandas",
  "task": {
    "flow": {
      "Expression_": "Input_inp_1",
      "Input_inp_1": "0",
      "Output_out_tr": "Expression_,Expression_expre_tr",
      "Expression_expre_tr": "Input_inp_1"
    },
    "details": [
      {
        "Expression": [
          {
            "expre_tr": {
              "input_df": "inp_son",
              "output_df": "exp_dgj",
              "transformation_name": "expre_tr",
              "_1": {
                "operator": "",
                "sequence": "1",
                "operatorType": "",
                "input_col_name": "col_1",
                "output_col_name": "col_1",
                "expression_value": " "
              },
              "_16": {
                "operator": "round",
                "sequence": "16",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "round",
                "expression_value": "round(col_13,1)"
              },
              "_15": {
                "operator": "equal",
                "sequence": "15",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "equal",
                "expression_value": "(col_1 = col_10 )"
              },
              "_14": {
                "operator": "",
                "sequence": "14",
                "operatorType": "",
                "input_col_name": "col_9",
                "output_col_name": "col_9",
                "expression_value": " "
              },
              "_13": {
                "operator": "",
                "sequence": "13",
                "operatorType": "",
                "input_col_name": "col_8",
                "output_col_name": "col_8",
                "expression_value": " "
              },
              "_12": {
                "operator": "",
                "sequence": "12",
                "operatorType": "",
                "input_col_name": "col_7",
                "output_col_name": "col_7",
                "expression_value": " "
              },
              "_11": {
                "operator": "",
                "sequence": "11",
                "operatorType": "",
                "input_col_name": "col_6",
                "output_col_name": "col_6",
                "expression_value": " "
              },
              "_10": {
                "operator": "",
                "sequence": "10",
                "operatorType": "",
                "input_col_name": "col_5",
                "output_col_name": "col_5",
                "expression_value": " "
              },
              "expre_tr_23": {
                "operator": "subtraction",
                "sequence": "23",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "sub_1",
                "expression_value": "(col_1 - 10)"
              },
              "expre_tr_4": {
                "operator": "",
                "sequence": "4",
                "operatorType": "",
                "input_col_name": "col_12",
                "output_col_name": "col_12",
                "expression_value": " "
              },
              "": {
                "input_df": "inp_son",
                "output_df": "exp_dgj",
                "transformation_name": ""
              },
              "_20": {
                "operator": "addition",
                "sequence": "20",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "add_1",
                "expression_value": "(col_1 + 20)"
              },
              "_17": {
                "operator": "modulo",
                "sequence": "17",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "modulo",
                "expression_value": "(col_1 % 2)"
              },
              "expre_tr_3": {
                "operator": "",
                "sequence": "3",
                "operatorType": "",
                "input_col_name": "col_11",
                "output_col_name": "col_11",
                "expression_value": " "
              },
              "expre_tr_5": {
                "operator": "",
                "sequence": "5",
                "operatorType": "",
                "input_col_name": "col_13",
                "output_col_name": "col_13",
                "expression_value": " "
              },
              "expre_tr_13": {
                "operator": "",
                "sequence": "13",
                "operatorType": "",
                "input_col_name": "col_8",
                "output_col_name": "col_8",
                "expression_value": " "
              },
              "_18": {
                "operator": "addition",
                "sequence": "18",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "add",
                "expression_value": "(col_1 + col_10)"
              },
              "expre_tr_14": {
                "operator": "",
                "sequence": "14",
                "operatorType": "",
                "input_col_name": "col_9",
                "output_col_name": "col_9",
                "expression_value": " "
              },
              "_9": {
                "operator": "",
                "sequence": "9",
                "operatorType": "",
                "input_col_name": "col_4",
                "output_col_name": "col_4",
                "expression_value": " "
              },
              "expre_tr_1": {
                "operator": "",
                "sequence": "1",
                "operatorType": "",
                "input_col_name": "col_1",
                "output_col_name": "col_1",
                "expression_value": " "
              },
              "expre_tr_10": {
                "operator": "",
                "sequence": "10",
                "operatorType": "",
                "input_col_name": "col_5",
                "output_col_name": "col_5",
                "expression_value": " "
              },
              "expre_tr_11": {
                "operator": "",
                "sequence": "11",
                "operatorType": "",
                "input_col_name": "col_6",
                "output_col_name": "col_6",
                "expression_value": " "
              },
              "expre_tr_12": {
                "operator": "",
                "sequence": "12",
                "operatorType": "",
                "input_col_name": "col_7",
                "output_col_name": "col_7",
                "expression_value": " "
              },
              "expre_tr_9": {
                "operator": "",
                "sequence": "9",
                "operatorType": "",
                "input_col_name": "col_4",
                "output_col_name": "col_4",
                "expression_value": " "
              },
              "expre_tr_22": {
                "operator": "subtraction",
                "sequence": "22",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "sub",
                "expression_value": "(col_1 - col_10)"
              },
              "expre_tr_15": {
                "operator": "equal",
                "sequence": "15",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "equal",
                "expression_value": "(col_1 = col_10 )"
              },
              "expre_tr_16": {
                "operator": "round",
                "sequence": "16",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "round",
                "expression_value": "round(col_13,1)"
              },
              "expre_tr_17": {
                "operator": "modulo",
                "sequence": "17",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "modulo",
                "expression_value": "(col_1 % 2)"
              },
              "expre_tr_18": {
                "operator": "addition",
                "sequence": "18",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "add",
                "expression_value": "(col_1 + col_10)"
              },
              "expre_tr_19": {
                "operator": "division",
                "sequence": "19",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "division",
                "expression_value": "(col_10 / col_1)"
              },
              "expre_tr_2": {
                "operator": "",
                "sequence": "2",
                "operatorType": "",
                "input_col_name": "col_10",
                "output_col_name": "col_10",
                "expression_value": " "
              },
              "expre_tr_20": {
                "operator": "addition",
                "sequence": "20",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "add_1",
                "expression_value": "(col_1 + 20)"
              },
              "expre_tr_7": {
                "operator": "",
                "sequence": "7",
                "operatorType": "",
                "input_col_name": "col_2",
                "output_col_name": "col_2",
                "expression_value": " "
              },
              "_19": {
                "operator": "division",
                "sequence": "19",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "division",
                "expression_value": "(col_10 / col_1)"
              },
              "_2": {
                "operator": "",
                "sequence": "2",
                "operatorType": "",
                "input_col_name": "col_10",
                "output_col_name": "col_10",
                "expression_value": " "
              },
              "expre_tr_21": {
                "operator": "division",
                "sequence": "21",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "divis_1",
                "expression_value": "(col_1 / 2)"
              },
              "_21": {
                "operator": "division",
                "sequence": "21",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "divis_1",
                "expression_value": "(col_1 / 2)"
              },
              "_22": {
                "operator": "subtraction",
                "sequence": "22",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "sub",
                "expression_value": "(col_1 - col_10)"
              },
              "_23": {
                "operator": "subtraction",
                "sequence": "23",
                "operatorType": "Math",
                "input_col_name": "",
                "output_col_name": "sub_1",
                "expression_value": "(col_1 - 10)"
              },
              "_3": {
                "operator": "",
                "sequence": "3",
                "operatorType": "",
                "input_col_name": "col_11",
                "output_col_name": "col_11",
                "expression_value": " "
              },
              "_4": {
                "operator": "",
                "sequence": "4",
                "operatorType": "",
                "input_col_name": "col_12",
                "output_col_name": "col_12",
                "expression_value": " "
              },
              "_5": {
                "operator": "",
                "sequence": "5",
                "operatorType": "",
                "input_col_name": "col_13",
                "output_col_name": "col_13",
                "expression_value": " "
              },
              "_6": {
                "operator": "",
                "sequence": "6",
                "operatorType": "",
                "input_col_name": "col_14",
                "output_col_name": "col_14",
                "expression_value": " "
              },
              "_7": {
                "operator": "",
                "sequence": "7",
                "operatorType": "",
                "input_col_name": "col_2",
                "output_col_name": "col_2",
                "expression_value": " "
              },
              "_8": {
                "operator": "",
                "sequence": "8",
                "operatorType": "",
                "input_col_name": "col_3",
                "output_col_name": "col_3",
                "expression_value": " "
              },
              "expre_tr_6": {
                "operator": "",
                "sequence": "6",
                "operatorType": "",
                "input_col_name": "col_14",
                "output_col_name": "col_14",
                "expression_value": " "
              },
              "expre_tr_8": {
                "operator": "",
                "sequence": "8",
                "operatorType": "",
                "input_col_name": "col_3",
                "output_col_name": "col_3",
                "expression_value": " "
              }
            }
          }
        ]
      },
      {
        "Input": [
          {
            "inp_1": {
              "schema": "transformation",
              "output_df": "inp_son",
              "table_name": "EC_04",
              "source_type": "MySQL",
              "select_columns": "col_1,col_10,col_11,col_12,col_13,col_14,col_2,col_3,col_4,col_5,col_6,col_7,col_8,col_9",
              "connection_name": "mysql_tr",
              "transformation_name": "inp_1"
            }
          }
        ]
      },
      {
        "Output": [
          {
            "out_tr": {
              "schema": "transformation",
              "input_df": "exp_dgj",
              "operation": "create",
              "table_name": "exp_result",
              "target_type": "MySQL",
              "connection_name": "mysql_tr",
              "transformation_name": "out_tr"
            }
          }
        ]
      }
    ]
  }
}