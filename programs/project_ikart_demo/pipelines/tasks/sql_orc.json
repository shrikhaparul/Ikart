{
  "task_id": 275,
  "pipeline_id": 111,
  "task_name": "sql_orc",
  "task_type": "SQL Execution",
  "sql_execution": {
    "connection_name": "mysql_connection_ikart_varun",
    "restart": "begin"
  },
  "sql_list": [
    {
      "seq_no": 1,
      "sql_query": "CREATE TABLE  IF NOT EXISTSemployees1 (\n    employee_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    salary INT,\n    department_id INT\n);\n\n\n",
      "table_used_desc": "create"
    },
    {
      "seq_no": 2,
      "sql_query": "INSERT INTO employees1(employee_id, first_name, last_name, salary, department_id)\nVALUES \n    (1, 'John', 'Doe', 80000, 101),\n    (2, 'Jane', 'Smith', 90000, 102),\n    (3, 'Mary', 'Johnson', 75000, 101),\n    (4, 'James', 'Brown', 95000, 102),\n    (5, 'Michael', 'Davis', 70000, 103);",
      "table_used_desc": "insert"
    },
    {
      "seq_no": 3,
      "sql_query": "SELECT department_id, \n       AVG(salary) as avg_salary\nFROM employees\nWHERE salary > (SELECT AVG(salary) FROM employees)\nGROUP BY department_name;\n",
      "table_used_desc": "agression"
    },
    {
      "seq_no": 4,
      "sql_query": "WITH high_earners AS (\n    SELECT employee_id, first_name, last_name, salary\n    FROM employees\n    WHERE salary > 80000\n)\nSELECT * \nFROM high_earners\nORDER BY salary DESC;\n",
      "table_used_desc": "CTE"
    },
    {
      "seq_no": 5,
      "sql_query": "SELECT department_id,\n       employee_id,\n       salary,\n       MAX(salary) OVER (PARTITION BY department_id) as max_salary_in_department\nFROM employees;\n",
      "table_used_desc": "windows"
    },
    {
      "seq_no": 6,
      "sql_query": "SELECT department_id,\n       AVG(CASE WHEN salary > 50000 THEN salary ELSE NULL END) as avg_high_salary,\n       AVG(CASE WHEN salary <= 50000 THEN salary ELSE NULL END) as avg_low_salary\nFROM employees\nGROUP BY department_id;\n",
      "table_used_desc": "conditional"
    },
    {
      "seq_no": 7,
      "sql_query": "CREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE\n);",
      "table_used_desc": "create"
    },
    {
      "seq_no": 8,
      "sql_query": "INSERT INTO orders (order_id, customer_id, order_date)\nVALUES \n    (101, 1, '2023-02-15'),\n    (102, 2, '2023-01-20'),\n    (103, 1, '2023-03-10'),\n    (104, 3, '2023-02-28'),\n    (105, 4, '2023-01-05');",
      "table_used_desc": "insert"
    },
    {
      "seq_no": 9,
      "sql_query": "SELECT orders.order_id, customers.customer_name\nFROM orders\nJOIN customers ON orders.customer_id = customers.customer_id\n             AND orders.order_date > '2023-01-01';\n",
      "table_used_desc": "join"
    }
  ]
}